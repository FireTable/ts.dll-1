import {GetWindowFlag, TsRet, WindowStateFlag, SpecialWindowFlag, EnumWindowFilter, displayMode, mouseMode, keypadMode, BindWindowMode, LockMode} from './interface';
export interface TSInstance {
  // 窗口
  FindWindow(className: string, title: string): number;
  FindWindowEx(parent: string, className: string, title: string): number;
  SendString(hWnd: number, str: string): TsRet;
  SendString2(hWnd: number, str: string): TsRet;
  SendStringIme(str: string): TsRet;
  GetWindow(hWnd: number, flag: GetWindowFlag): number;
  GetWindowTitle(hWnd: number): string;
  GetWindowClass(hWnd: number): string;
  GetWindowRect(hWnd: number, x1: number, y1: number, x2: number, y2: number): TsRet;
  GetWindowProcessPath(hWnd: number): string;
  GetWindowState(hWnd: number, flag: WindowStateFlag): TsRet;
  GetClientRect(hWnd: number, x1: number, y1: number, x2: number, y2: number): TsRet;
  GetForegroundWindow(): number;
  GetForegroundFocus(): number;
  GetWindowProcessId(hWnd: number): number;
  GetProcessInfo(pid: number): string;
  GetClientSize(hWnd: string, width: Winax.Variant, height: Winax.Variant): TsRet;
  GetMousePointWindow(): number;
  GetSpecialWindow(flag: SpecialWindowFlag): number;
  GetPointWindow(x: number, y: number): number;
  EnumWindow(parent: number, title: string, className: string, filter: EnumWindowFilter): string;
  EnumProcess(processName: string): string;
  EnumWindowByProcess(processName: string, title: string, className: string, filter: EnumWindowFilter): string;
  ScreenToClient(hWnd: number, x: number, y: number): number;
  SetWindowText(hWnd: number, title: string): TsRet;
  SetWindowSize(hWnd: number, width: number, height: number): TsRet;
  SetWindowState(hWnd: number, flag: WindowStateFlag): TsRet;
  GetClipboard(): string;
  SendPaste(hWnd: number): TsRet;
  SetClipboard(value: string): TsRet;
  SetClientSize(hWnd: number, width: number, height: number): TsRet;
  SetWindowTransparent(hWnd: number, trans: number): TsRet;
  MoveWindow(hWnd: number, x: number, y: number): TsRet;
  // 后台
  BindWindow(hWnd: number, display: displayMode, mouse: mouseMode, keypad: keypadMode, mode: BindWindowMode): TsRet;
  UnBindWindow(): TsRet;
  DownCpu(rate: number): TsRet;
  LockInput(lock: LockMode): TsRet;
  IsBind(hWnd: number): TsRet;
  EnableRealKeypad(enable: 0 | 1): TsRet;
  EnableRealMouse(enable: 0 | 1, delay: number, step: number): TsRet;
  // 键盘和鼠标
  KeyPress(keyCode: number): TsRet;
  WaitKey(keyCode: number, timeOut: number): TsRet;
  KeyPressChar(keyName: string): TsRet;
  keyPressStr(keyName: string, delay: number): TsRet;
  getCursorShape(): string;
MoveToEx({x, y, w, h}: moveRange): Coordinate;
  getCursorPos({x, y}: Coordinate): TsRet;
  keyDown(keyCode: number): TsRet;
  keyDownChar(keyName: string): TsRet;
  keyUp(keyCode: number): TsRet;
  keyUpChar(keyName: string): TsRet;
  moveR({x: rx, y: ry}: Coordinate): TsRet;
  moveTo({x, y}: Coordinate): TsRet;
  rightDown(): TsRet;
  rightUp(): TsRet;
  rightClick(): TsRet;
  middleClick(): TsRet;
  wheelUp(): TsRet;
  wheelDown(): TsRet;
  leftDown(): TsRet;
  leftUp(): TsRet;
  leftClick(): TsRet;
  leftDoubleClick(): TsRet;
  setSimMode(mode: 0 | 1): TsRet;
  setKeypadDelay(type: 'windows' | 'dx', delay: number): TsRet;
  setMouseDelay(type: 'windows' | 'dx', delay: number): TsRet;
}
