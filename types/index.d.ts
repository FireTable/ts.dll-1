/*
 * @Author: huz
 * @Date: 2019-09-23 00:28:30
 * @LastEditTime: 2019-09-23 00:28:30
 */
import {TsRet, Area, GetWindowFlag, WindowStateFlag, SpecialWindowFlag, EnumWindowFilter, Coordinate, displayMode, mouseMode, keypadMode, BindWindowMode, LockMode, TsSwitch, MoveRange, VariantPointerParams, MemoryIntByte, MemoryCharType, MemoryBitNum, TsMode, MemoryState} from './modules/interface';
export default class TSPlug {
  private ts;
  constructor();
  private static init;
  findWindow(className: string, title: string): number;
  findWindowEx(parent: string, className: string, title: string): number;
  sendString(hWnd: number, str: string): TsRet;
  sendString2(hWnd: number, str: string): TsRet;
  sendStringIme(str: string): TsRet;
  getWindow(hWnd: number, flag: GetWindowFlag): number;
  getWindowTitle(hWnd: number): string;
  getWindowClass(hWnd: number): string;
  getWindowRect<T = number>(hWnd: T, x1: T, y1: T, x2: T, y2: T): TsRet;
  getWindowRect(hWnd: number, {x1, y1, x2, y2}: Area): TsRet;
  getWindowProcessPath(hWnd: number): string;
  getWindowState(hWnd: number, flag: WindowStateFlag): TsRet;
  getClientRect<T = number>(hWnd: T, x1: T, y1: T, x2: T, y2: T): TsRet;
  getClientRect(hWnd: number, {x1, y1, x2, y2}: Area): TsRet;
  getForegroundWindow(): number;
  getForegroundFocus(): number;
  getWindowProcessId(hWnd: number): number;
  getProcessInfo(pid: number): string;
  getClientSize(hWnd: string): VariantPointerParams;
  getMousePointWindow(): number;
  getSpecialWindow(flag: SpecialWindowFlag): number;
  getPointWindow(x: number, y: number): number;
  enumWindow(parent: number, title: string, className: string, filter: EnumWindowFilter): string;
  enumProcess(processName: string): string;
  enumWindowByProcess(processName: string, title: string, className: string, filter: EnumWindowFilter): string;
  screenToClient<T = number>(hWnd: T, x: T, y: T): T;
  screenToClient(hWnd: number, {x, y}: Coordinate): number;
  setWindowText(hWnd: number, title: string): TsRet;
  setWindowSize(hWnd: number, width: number, height: number): TsRet;
  setWindowState(hWnd: number, flag: WindowStateFlag): TsRet;
  getClipboard(): string;
  sendPaste(hWnd: number): TsRet;
  setClipboard(value: string): TsRet;
  setClientSize(hWnd: number, width: number, height: number): TsRet;
  setWindowTransparent(hWnd: number, trans: number): TsRet;
  moveWindow(hWnd: number, x: number, y: number): TsRet;
  bindWindow(hWnd: number, display: displayMode, mouse: mouseMode, keypad: keypadMode, mode: BindWindowMode): TsRet;
  unBindWindow(): TsRet;
  downCpu(rate: number): TsRet;
  lockInput(lock: LockMode): TsRet;
  isBind(hWnd: number): TsRet;
  enableRealKeypad(enable: TsSwitch): TsRet;
  enableRealMouse(enable: TsSwitch, delay: number, step: number): TsRet;
  keyPress(keyCode: number): TsRet;
  waitKey(keyCode: number, timeOut: number): TsRet;
  keyPressChar(keyName: string): TsRet;
  keyPressStr(keyName: string, delay: number): TsRet;
  getCursorShape(): string;
  moveToEx<T = number>(x: T, y: T, w: T, h: T): Coordinate;
  moveToEx({x, y, w, h}: MoveRange): Coordinate;
  getCursorPos(): VariantPointerParams;
  keyDown(keyCode: number): TsRet;
  keyDownChar(keyName: string): TsRet;
  keyUp(keyCode: number): TsRet;
  keyUpChar(keyName: string): TsRet;
  moveR<T = number>(rx: T, ry: T): TsRet;
  moveR({x: rx, y: ry}: Coordinate): TsRet;
  moveTo<T = number>(rx: T, ry: T): TsRet;
  moveTo({x, y}: Coordinate): TsRet;
  rightDown(): TsRet;
  rightUp(): TsRet;
  rightClick(): TsRet;
  middleClick(): TsRet;
  wheelUp(): TsRet;
  wheelDown(): TsRet;
  leftDown(): TsRet;
  leftUp(): TsRet;
  leftClick(): TsRet;
  leftDoubleClick(): TsRet;
  setSimMode(mode: TsMode): TsRet;
  setKeypadDelay(type: 'windows' | 'dx', delay: number): TsRet;
  setMouseDelay(type: 'windows' | 'dx', delay: number): TsRet;
  ver(): string;
  delay(ms: number): TsRet;
  reg(regCode: string, type: TsMode): number;
  getPath(): string;
  setPath(path: string): TsRet;
  getBasePath(): string;
  setShowErrorMsg(show: TsSwitch): TsRet;
  getMachineCode(): string;
  capture<T = number>(filename: string, x1: T, y1: T, x2: T, y2: T): TsRet;
  capture(filename: string, {x1, y1, x2, y2}: Area): TsRet;
  captureGif<T = number>(filename: string, x1: T, y1: T, x2: T, y2: T): TsRet;
  captureGif(filename: string, {x1, y1, x2, y2}: Area): TsRet;
  captureJpg<T = number>(filename: string, x1: T, y1: T, x2: T, y2: T): TsRet;
  captureJpg(filename: string, {x1, y1, x2, y2}: Area): TsRet;
  capturePng<T = number>(filename: string, x1: T, y1: T, x2: T, y2: T): TsRet;
  capturePng(filename: string, {x1, y1, x2, y2}: Area): TsRet;
  getColor(x: number, y: number): string;
  getColor({x, y}: Coordinate): string;
  findColor<T = number>(color: string, sim: T, direction: T, x1: T, y1: T, x2: T, Y2: T): VariantPointerParams;
  findColor(color: string, sim: number, direction: number, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findColorEx<T = number>(color: string, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  findColorEx(color: string, sim: number, {x1, y1, x2, y2}: Area): string;
  findPic<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, x1: T, y1: T, x2: T, Y2: T): VariantPointerParams;
  findPic<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findPicS<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, x1: T, y1: T, x2: T, Y2: T): VariantPointerParams;
  findPicS<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findPicEx<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, x1: T, y1: T, x2: T, Y2: T): VariantPointerParams;
  findPicEx<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findPicExS<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, x1: T, y1: T, x2: T, Y2: T): VariantPointerParams;
  findPicExS<T = number, K = string>(picName: K, deltaColor: K, sim: T, direction: T, {x1, y1, x2, y2}: Area): VariantPointerParams;
  isDisplayDead<T = number>(x1: T, y1: T, x2: T, y2: T): TsRet;
  isDisplayDead({x1, y1, x2, y2}: Area): TsRet;
  getScreenData<T = number>(x1: T, y1: T, x2: T, y2: T): number;
  getScreenData({x1, y1, x2, y2}: Area): number;
  cmpColor<T = number>(color: string, sim: T, x: T, y: T): TsRet;
  cmpColor(color: string, sim: number, {x, y}: Coordinate): TsRet;
  setPicPwd(password: string): TsRet;
  matchPicName(picName: string): string;
  findMultiColor<T = number, K = string>(firstColor: K, offsetColor: T, sim: T, direction: T, x1: T, y1: T, x2: T, y2: T): VariantPointerParams;
  findMultiColor<T = number, K = string>(firstColor: K, offsetColor: T, sim: T, direction: T, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findMultiColorEx<T = number, K = string>(firstColor: K, offsetColor: T, sim: T, direction: T, x1: T, y1: T, x2: T, y2: T): string;
  findMultiColorEx<T = number, K = string>(firstColor: K, offsetColor: T, sim: T, direction: T, {x1, y1, x2, y2}: Area): string;
  ocr<T = number>(color: string, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  ocr<T = number>(color: string, sim: T, {x1, y1, x2, y2}: Area): string;
  ocrEx<T = number>(color: string, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  ocrEx<T = number>(color: string, sim: T, {x1, y1, x2, y2}: Area): string;
  findStr<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): VariantPointerParams;
  findStr<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findStrS<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): VariantPointerParams;
  findStrS<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findStrEx<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  findStrEx<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): string;
  findStrExS<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  findStrExS<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): string;
  findStrFast<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): VariantPointerParams;
  findStrFast<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findStrFastS<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): VariantPointerParams;
  findStrFastS<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): VariantPointerParams;
  findStrFastEx<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  findStrFastEx<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): string;
  findStrFastExS<T = number, K = string>(str: K, color: K, sim: T, x1: T, y1: T, x2: T, y2: T): string;
  findStrFastExS<K = string>(str: K, color: K, sim: number, {x1, y1, x2, y2}: Area): string;
  useDict(index: number): TsRet;
  setDict(index: number, file: string): TsRet;
  setDictPwd(password: string): TsRet;
  clearDict(index: number): TsRet;
  getNowDict(): number;
  disableFontSmooth(): TsRet;
  checkFontSmooth(): TsRet;
  checkUAC(): TsRet;
  setUAC(enable: TsSwitch): TsRet;
  asmCode(baseAddress: number): string;
  assemble(code: string, baseAddress: number, isUpper: TsSwitch): string;
  asmClear(): TsRet;
  asmAdd(instruction: string): TsRet;
  asmCall(hWnd: number, mode: TsMode): number;
  tsGuardProtect(enable: TsSwitch, type: string): TsRet;
  tsGuardProtectToHide(enable: TsSwitch): TsRet;
  tsGuardProtectToHide2(enable: TsSwitch): TsRet;
  tsGuardProtectToNp(enable: TsSwitch): TsRet;
  tsDXKmProtect(enable: TsSwitch, type: string): TsRet;
  tsDXGraphicProtect(enable: TsSwitch): TsRet;
  findInt(hWnd: number, addressRange: string, min: number, max: number, type: MemoryBitNum): string;
  findString(hWnd: number, addressRange: string, value: string, type: MemoryCharType): string;
  findData(hWnd: number, addressRange: string, data: string): string;
  findFloat(hWnd: number, addressRange: string, min: number, max: number): string;
  findDouble(hWnd: number, addressRange: number, min: number, max: number): string;
  findIntEx(hWnd: number, addressRange: number, min: number, max: number, type: MemoryBitNum, step: number, multi: TsSwitch, fast: TsSwitch): string;
  findStringEx(hWnd: number, addressRange: number, value: string, type: MemoryBitNum, step: number, multi: TsSwitch, fast: TsSwitch): string;
  findDataEx(hWnd: number, addressRange: number, data: string, step: number, multi: TsSwitch, fast: TsSwitch): string;
  findFloatEx(hWnd: number, addressRange: number, min: number, max: number, type: MemoryBitNum, step: number, multi: TsSwitch, fast: TsSwitch): string;
  findDoubleEx(hWnd: number, addressRange: number, min: number, max: number, type: MemoryBitNum, step: number, multi: TsSwitch, fast: TsSwitch): string;
  writeInt(hWnd: number, address: string, type: MemoryBitNum, value: number): TsRet;
  writeString(hWnd: number, address: string, type: MemoryBitNum, value: string): TsRet;
  writeData(hWnd: number, address: string, data: string): TsRet;
  writeFloat(hWnd: number, address: string, type: MemoryBitNum, value: number): TsRet;
  writeDouble(hWnd: number, address: string, type: MemoryBitNum, value: number): TsRet;
  readInt(hWnd: number, Address: string, type: MemoryBitNum): number;
  readString(hWnd: number, address: string, type: MemoryBitNum, length: number): string;
  readFloat(hWnd: number, address: string): number;
  readData(hWnd: number, address: string, length: number): string;
  readDouble(hWnd: number, address: string): number;
  stringToData(value: string, type: MemoryCharType): string;
  intToData(value: number, type: MemoryIntByte): string;
  floatToData(value: number): string;
  doubleToData(value: number): string;
  virtualAllocEx(hWnd: number, address: string, size: number, type: MemoryState): number;
  virtualFreeEx(hWnd: number, address: string): TsRet;
  terminateProcess(pid: number): TsRet;
  getCommandLine(hWnd: number): string;
  getModuleBaseAddr(hWnd: number, module: string): number;
  freeProcessMemory(hWnd: number): TsRet;
}
